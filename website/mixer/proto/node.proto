// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  **** IMPORTANT NOTE ****
//
//  The proto of BT data has to match exactly the g3 proto, including tag
//  number.

// REST API URL from the proto in this file:
// ========================================
//    /node/property-labels
//    /node/property-values
//    /node/triples
// ========================================

syntax = "proto3";
option go_package = "./proto";
package datacommons;

import "entity.proto";

// Triple.
message Triple {
  string subject_id = 1;
  string predicate = 2;
  string object_id = 3;
  string object_name = 4; // Only when object_id is set.
  string object_value = 5;
  string provenance_id = 6;
  string subject_name = 7;  // Only for in arcs.
  repeated string subject_types = 8; // Only for in arcs.
  repeated string object_types = 10; // Only when object_id is set.
}

// A collection of triples.
message Triples {
  repeated Triple triples = 1;
  // Before potential truncation.
  double total = 6;
  // A predicate could link to multiple neighbors.
  map<string, EntityInfoCollection> in_nodes = 3;  // Key is predicate.
  map<string, EntityInfoCollection> out_nodes = 4; // Key is predicate.
  string subject_id = 5;

  reserved 2;
}

// Full lists of in and out labels for a given node ID.
message PropertyLabels {
  repeated string in_labels = 1;
  repeated string out_labels = 2;
}

// Request to get property labels.
message GetPropertyLabelsRequest {
  // The dcids of nodes.
  repeated string dcids = 1;
}

// Response returned by GetPropertyLabels.
message GetPropertyLabelsResponse { map<string, PropertyLabels> data = 1; }

// Request to get all neighboring nodes along an edge labeled by a property.
message GetPropertyValuesRequest {
  // The dcids of nodes to query for.
  repeated string dcids = 1;

  // The type of the neighboring node to query for.
  string value_type = 2;

  // The property to get adjacent nodes for.
  string property = 3;

  // Maximum number of nodes to query for. When set to 0 or non-specified,
  // no limit is applied.
  int32 limit = 4;

  // Direction, "in" or "out". When not specified, return results for both.
  string direction = 5;
}

// ArcNodes represents property and linked nodes.
message ArcNodes {
  // Key is property
  repeated EntityInfo in = 1;
  repeated EntityInfo out = 2;
}

// Response returned by GetPropertyValues.
message GetPropertyValuesResponse {
  // Key is dcid.
  map<string, ArcNodes> data = 1;
}

// Request to get all triples linking to the given nodes.
message GetTriplesRequest {
  // The dcids of the nodes to query for.
  repeated string dcids = 1;
  // Maximum number of triples for each property and type of the neighbor.
  int32 limit = 2;
}

// Response returned by GetTriples.
message GetTriplesResponse {
  // Key is entity dcid.
  map<string, Triples> triples = 1;
}
