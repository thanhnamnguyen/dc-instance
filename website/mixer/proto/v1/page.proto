// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "./proto";
package datacommons.v1;

import "stat.proto";

message Place {
  string dcid = 1;
  string name = 2;
  int32 pop = 3;
}

message Places { repeated Place places = 1; }

// List of categories of observations for a given place. These correspond to the
// sections of the Place Explorer (https://datacommons.org/place/geoId/06).
// This is a copied proto from g3.
message ObsCategories {
  repeated string category = 1;
  optional string place_name = 2;
  optional string place_dcid = 3;
}

// Data received from the cache for the landing page.
message LandingPageCache {
  // Key is stat var dcid.
  map<string, ObsTimeSeries> data = 1;

  reserved 2;
}


message BioPageRequest {
  string node = 1;
}

message PlacePageRequest {
  string node = 1;
  // A list of additional stat vars need to be fetched in addition to the
  // data in cache. This is to be used in local development, where new chart is
  // added to chart config but data is not added to cache (delay from cache
  // build).
  repeated string new_stat_vars = 2;
  // Seed value for random selection. Used by test to get deterministic result.
  int64 seed = 3;
  // The category for which data needs to be fetched.
  string category = 4;
}

// Response to get place page info for a place.
message PlacePageResponse {
  // Keyed by place dcid.
  map<string, datacommons.StatVarSeries> stat_var_series = 1;
  map<string, Places> all_child_places = 2;
  map<string, datacommons.PointStat> latest_population = 8;
  map<string, ObsCategories> valid_categories = 9;
  string child_places_type = 3;
  repeated string child_places = 4;
  repeated string parent_places = 5;
  repeated string similar_places = 6;
  repeated string nearby_places = 7;
}