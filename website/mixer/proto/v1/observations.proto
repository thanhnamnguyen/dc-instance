// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
option go_package = "./proto";
package datacommons.v1;

import "stat.proto";


message TimeSeries {
  repeated datacommons.PointStat series = 1;
  string facet = 2;
}

message EntityObservations {
  string entity = 1;
  repeated datacommons.PointStat points_by_facet = 2;
  repeated TimeSeries series_by_facet = 3;
}

message VariableObservations {
  string variable = 1;
  repeated EntityObservations observations_by_entity = 2;
}

// --------------  Observations Points

message ObservationsPointRequest {
  string entity_variable = 1;
  string date = 3;
}

message BulkObservationsPointRequest {
  repeated string entities = 1;
  repeated string variables = 2;
  string date = 3;
  bool all_facets = 4;
}

message BulkObservationsPointResponse {
  repeated VariableObservations observations_by_variable = 1;
  // Keyed by the hash of StatMetadata
  map<string, datacommons.StatMetadata> facets = 2;
}

message BulkObservationsPointLinkedRequest {
  // The observed entity type
  string entity_type = 1;
  // The entity that is linked to the observed entity
  string linked_entity = 2;
  // The property that links the root and observed entity
  string linked_property = 3;
  // Variables to query for
  repeated string variables = 4;
  // [Optional] Observation date
  string date = 5;
  // [Optional] Whether to fetch data from all facets
  bool all_facets = 6;
}

// ------------  Observations Series
message ObservationsSeriesRequest {
  string entity_variable = 1;
}

message ObservationsSeriesResponse {
  repeated datacommons.PointStat observations = 1;
  datacommons.StatMetadata facet = 2;
}

message BulkObservationsSeriesRequest {
  repeated string entities = 1;
  repeated string variables = 2;
  bool all_facets = 3;
}

message BulkObservationsSeriesResponse {
  repeated VariableObservations observations_by_variable = 1;
  map<string, datacommons.StatMetadata> facets = 2;
}

message BulkObservationsSeriesLinkedRequest {
  // The observed entity type
  string entity_type = 1;
  // The entity that is linked to the observed entity
  string linked_entity = 2;
  // The property that links the root and observed entity
  string linked_property = 3;
  // Variables to query for
  repeated string variables = 4;
  // [Optional] Whether to fetch data from all facets
  bool all_facets = 5;
}

message DerivedObservationsSeriesRequest {
  string entity = 1;
  // Supported operators: +, -, *, /, along with parentheses.
  //
  // The items of the formula have a form of "StatVar[OptionalFilters]".
  //
  // The following filters are supported:
  // 1. mm: MeasurementMethod
  // 2. op: ObservationPeriod
  // 3. ut: Unit
  // 4. sf: ScalingFactor
  //
  // For example:
  // 1. Person_Count - Person_Count_Female
  // 2. Person_Count_Female / Person_Count[mm=CensusACS5yrSurvey;op=P5Y]
  // 3. Person_Count - Person_Count_Female - Person_Count_Male[op=P5Y]
  // 4. (Person_Count_Male - Person_Count_Female) / Person_Count
  string formula = 2;
}

message DerivedObservationsSeriesResponse {
  repeated datacommons.PointStat observations = 1;
}
