// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  **** IMPORTANT NOTE ****
//
//  The proto of BT data has to match exactly the g3 proto, including tag
//  number.

syntax = "proto3";
option go_package = "./proto";
package datacommons;

import "stat_var.proto";


// The direction of node property (arc in the graph).
enum PropertyDirection {
  DIRECTION_UNKNOWN = 0;
  DIRECTION_IN = 1;
  DIRECTION_OUT = 2;
}

// Represent a node with a subgraph attached to it.
message GraphNode {
  // Message to hold a cohort of nodes that have the same predicate and
  // direction.
  message LinkedNodes {
    string property = 1;
    PropertyDirection direction = 2;
    repeated GraphNode nodes = 3;
  }
  // A group of neighbour nodes by predicate.
  repeated LinkedNodes neighbors = 1;
  // Value of the node, could be dcid or node string value.
  string value = 2;
}

// This is used in SubGraph cache.
// A single root ID might match multiple SubGraph configs.
// All `nodes` have the same root ID.
message GraphNodes { repeated GraphNode nodes = 1; }

// Holds the import manifest information.
message MemdbConfig {
  // Name of the import
  string import_name = 1;
  // The url of the data, ususally the source url link
  string provenance_url = 2;
  // Data download link. For private import, this should be the GCS folder url.
  // Example:
  // https://pantheon.corp.google.com/storage/browser/datcom-public/food
  string data_download_url = 3;
  // The root SVG for the import. This will be set as a child stat var group
  // of "dc/g/Root"
  string root_svg = 4;
  // Key is StatVarGroup ID.
  map<string, StatVarGroupNode> stat_var_groups = 5;
}

// PayloadResponse represents API response with encoded payload string
message PayloadResponse { string payload = 1; }