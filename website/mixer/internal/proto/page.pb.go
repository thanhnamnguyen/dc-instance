// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: v1/page.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dcid string `protobuf:"bytes,1,opt,name=dcid,proto3" json:"dcid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pop  int32  `protobuf:"varint,3,opt,name=pop,proto3" json:"pop,omitempty"`
}

func (x *Place) Reset() {
	*x = Place{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_page_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place) ProtoMessage() {}

func (x *Place) ProtoReflect() protoreflect.Message {
	mi := &file_v1_page_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place.ProtoReflect.Descriptor instead.
func (*Place) Descriptor() ([]byte, []int) {
	return file_v1_page_proto_rawDescGZIP(), []int{0}
}

func (x *Place) GetDcid() string {
	if x != nil {
		return x.Dcid
	}
	return ""
}

func (x *Place) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Place) GetPop() int32 {
	if x != nil {
		return x.Pop
	}
	return 0
}

type Places struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Places []*Place `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
}

func (x *Places) Reset() {
	*x = Places{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_page_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Places) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Places) ProtoMessage() {}

func (x *Places) ProtoReflect() protoreflect.Message {
	mi := &file_v1_page_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Places.ProtoReflect.Descriptor instead.
func (*Places) Descriptor() ([]byte, []int) {
	return file_v1_page_proto_rawDescGZIP(), []int{1}
}

func (x *Places) GetPlaces() []*Place {
	if x != nil {
		return x.Places
	}
	return nil
}

// List of categories of observations for a given place. These correspond to the
// sections of the Place Explorer (https://datacommons.org/place/geoId/06).
// This is a copied proto from g3.
type ObsCategories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category  []string `protobuf:"bytes,1,rep,name=category,proto3" json:"category,omitempty"`
	PlaceName *string  `protobuf:"bytes,2,opt,name=place_name,json=placeName,proto3,oneof" json:"place_name,omitempty"`
	PlaceDcid *string  `protobuf:"bytes,3,opt,name=place_dcid,json=placeDcid,proto3,oneof" json:"place_dcid,omitempty"`
}

func (x *ObsCategories) Reset() {
	*x = ObsCategories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_page_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsCategories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsCategories) ProtoMessage() {}

func (x *ObsCategories) ProtoReflect() protoreflect.Message {
	mi := &file_v1_page_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsCategories.ProtoReflect.Descriptor instead.
func (*ObsCategories) Descriptor() ([]byte, []int) {
	return file_v1_page_proto_rawDescGZIP(), []int{2}
}

func (x *ObsCategories) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ObsCategories) GetPlaceName() string {
	if x != nil && x.PlaceName != nil {
		return *x.PlaceName
	}
	return ""
}

func (x *ObsCategories) GetPlaceDcid() string {
	if x != nil && x.PlaceDcid != nil {
		return *x.PlaceDcid
	}
	return ""
}

// Data received from the cache for the landing page.
type LandingPageCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is stat var dcid.
	Data map[string]*ObsTimeSeries `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LandingPageCache) Reset() {
	*x = LandingPageCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_page_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LandingPageCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LandingPageCache) ProtoMessage() {}

func (x *LandingPageCache) ProtoReflect() protoreflect.Message {
	mi := &file_v1_page_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LandingPageCache.ProtoReflect.Descriptor instead.
func (*LandingPageCache) Descriptor() ([]byte, []int) {
	return file_v1_page_proto_rawDescGZIP(), []int{3}
}

func (x *LandingPageCache) GetData() map[string]*ObsTimeSeries {
	if x != nil {
		return x.Data
	}
	return nil
}

type BioPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *BioPageRequest) Reset() {
	*x = BioPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_page_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioPageRequest) ProtoMessage() {}

func (x *BioPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_page_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioPageRequest.ProtoReflect.Descriptor instead.
func (*BioPageRequest) Descriptor() ([]byte, []int) {
	return file_v1_page_proto_rawDescGZIP(), []int{4}
}

func (x *BioPageRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type PlacePageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	// A list of additional stat vars need to be fetched in addition to the
	// data in cache. This is to be used in local development, where new chart is
	// added to chart config but data is not added to cache (delay from cache
	// build).
	NewStatVars []string `protobuf:"bytes,2,rep,name=new_stat_vars,json=newStatVars,proto3" json:"new_stat_vars,omitempty"`
	// Seed value for random selection. Used by test to get deterministic result.
	Seed int64 `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	// The category for which data needs to be fetched.
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *PlacePageRequest) Reset() {
	*x = PlacePageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_page_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacePageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacePageRequest) ProtoMessage() {}

func (x *PlacePageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_page_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacePageRequest.ProtoReflect.Descriptor instead.
func (*PlacePageRequest) Descriptor() ([]byte, []int) {
	return file_v1_page_proto_rawDescGZIP(), []int{5}
}

func (x *PlacePageRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *PlacePageRequest) GetNewStatVars() []string {
	if x != nil {
		return x.NewStatVars
	}
	return nil
}

func (x *PlacePageRequest) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *PlacePageRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

// Response to get place page info for a place.
type PlacePageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Keyed by place dcid.
	StatVarSeries    map[string]*StatVarSeries `protobuf:"bytes,1,rep,name=stat_var_series,json=statVarSeries,proto3" json:"stat_var_series,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AllChildPlaces   map[string]*Places        `protobuf:"bytes,2,rep,name=all_child_places,json=allChildPlaces,proto3" json:"all_child_places,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LatestPopulation map[string]*PointStat     `protobuf:"bytes,8,rep,name=latest_population,json=latestPopulation,proto3" json:"latest_population,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ValidCategories  map[string]*ObsCategories `protobuf:"bytes,9,rep,name=valid_categories,json=validCategories,proto3" json:"valid_categories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChildPlacesType  string                    `protobuf:"bytes,3,opt,name=child_places_type,json=childPlacesType,proto3" json:"child_places_type,omitempty"`
	ChildPlaces      []string                  `protobuf:"bytes,4,rep,name=child_places,json=childPlaces,proto3" json:"child_places,omitempty"`
	ParentPlaces     []string                  `protobuf:"bytes,5,rep,name=parent_places,json=parentPlaces,proto3" json:"parent_places,omitempty"`
	SimilarPlaces    []string                  `protobuf:"bytes,6,rep,name=similar_places,json=similarPlaces,proto3" json:"similar_places,omitempty"`
	NearbyPlaces     []string                  `protobuf:"bytes,7,rep,name=nearby_places,json=nearbyPlaces,proto3" json:"nearby_places,omitempty"`
}

func (x *PlacePageResponse) Reset() {
	*x = PlacePageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_page_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacePageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacePageResponse) ProtoMessage() {}

func (x *PlacePageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_page_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacePageResponse.ProtoReflect.Descriptor instead.
func (*PlacePageResponse) Descriptor() ([]byte, []int) {
	return file_v1_page_proto_rawDescGZIP(), []int{6}
}

func (x *PlacePageResponse) GetStatVarSeries() map[string]*StatVarSeries {
	if x != nil {
		return x.StatVarSeries
	}
	return nil
}

func (x *PlacePageResponse) GetAllChildPlaces() map[string]*Places {
	if x != nil {
		return x.AllChildPlaces
	}
	return nil
}

func (x *PlacePageResponse) GetLatestPopulation() map[string]*PointStat {
	if x != nil {
		return x.LatestPopulation
	}
	return nil
}

func (x *PlacePageResponse) GetValidCategories() map[string]*ObsCategories {
	if x != nil {
		return x.ValidCategories
	}
	return nil
}

func (x *PlacePageResponse) GetChildPlacesType() string {
	if x != nil {
		return x.ChildPlacesType
	}
	return ""
}

func (x *PlacePageResponse) GetChildPlaces() []string {
	if x != nil {
		return x.ChildPlaces
	}
	return nil
}

func (x *PlacePageResponse) GetParentPlaces() []string {
	if x != nil {
		return x.ParentPlaces
	}
	return nil
}

func (x *PlacePageResponse) GetSimilarPlaces() []string {
	if x != nil {
		return x.SimilarPlaces
	}
	return nil
}

func (x *PlacePageResponse) GetNearbyPlaces() []string {
	if x != nil {
		return x.NearbyPlaces
	}
	return nil
}

var File_v1_page_proto protoreflect.FileDescriptor

var file_v1_page_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x05, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x70, 0x22, 0x37,
	0x0a, 0x06, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x44, 0x63, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x63, 0x69, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x10,
	0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x53, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x24, 0x0a, 0x0e, 0x42,
	0x69, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x22, 0x7a, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xd4, 0x07,
	0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x5f, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x6c, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x64, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x61, 0x72, 0x62, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x5c, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x56, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x41, 0x6c, 0x6c,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x15, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x61, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_page_proto_rawDescOnce sync.Once
	file_v1_page_proto_rawDescData = file_v1_page_proto_rawDesc
)

func file_v1_page_proto_rawDescGZIP() []byte {
	file_v1_page_proto_rawDescOnce.Do(func() {
		file_v1_page_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_page_proto_rawDescData)
	})
	return file_v1_page_proto_rawDescData
}

var file_v1_page_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v1_page_proto_goTypes = []interface{}{
	(*Place)(nil),             // 0: datacommons.v1.Place
	(*Places)(nil),            // 1: datacommons.v1.Places
	(*ObsCategories)(nil),     // 2: datacommons.v1.ObsCategories
	(*LandingPageCache)(nil),  // 3: datacommons.v1.LandingPageCache
	(*BioPageRequest)(nil),    // 4: datacommons.v1.BioPageRequest
	(*PlacePageRequest)(nil),  // 5: datacommons.v1.PlacePageRequest
	(*PlacePageResponse)(nil), // 6: datacommons.v1.PlacePageResponse
	nil,                       // 7: datacommons.v1.LandingPageCache.DataEntry
	nil,                       // 8: datacommons.v1.PlacePageResponse.StatVarSeriesEntry
	nil,                       // 9: datacommons.v1.PlacePageResponse.AllChildPlacesEntry
	nil,                       // 10: datacommons.v1.PlacePageResponse.LatestPopulationEntry
	nil,                       // 11: datacommons.v1.PlacePageResponse.ValidCategoriesEntry
	(*ObsTimeSeries)(nil),     // 12: datacommons.ObsTimeSeries
	(*StatVarSeries)(nil),     // 13: datacommons.StatVarSeries
	(*PointStat)(nil),         // 14: datacommons.PointStat
}
var file_v1_page_proto_depIdxs = []int32{
	0,  // 0: datacommons.v1.Places.places:type_name -> datacommons.v1.Place
	7,  // 1: datacommons.v1.LandingPageCache.data:type_name -> datacommons.v1.LandingPageCache.DataEntry
	8,  // 2: datacommons.v1.PlacePageResponse.stat_var_series:type_name -> datacommons.v1.PlacePageResponse.StatVarSeriesEntry
	9,  // 3: datacommons.v1.PlacePageResponse.all_child_places:type_name -> datacommons.v1.PlacePageResponse.AllChildPlacesEntry
	10, // 4: datacommons.v1.PlacePageResponse.latest_population:type_name -> datacommons.v1.PlacePageResponse.LatestPopulationEntry
	11, // 5: datacommons.v1.PlacePageResponse.valid_categories:type_name -> datacommons.v1.PlacePageResponse.ValidCategoriesEntry
	12, // 6: datacommons.v1.LandingPageCache.DataEntry.value:type_name -> datacommons.ObsTimeSeries
	13, // 7: datacommons.v1.PlacePageResponse.StatVarSeriesEntry.value:type_name -> datacommons.StatVarSeries
	1,  // 8: datacommons.v1.PlacePageResponse.AllChildPlacesEntry.value:type_name -> datacommons.v1.Places
	14, // 9: datacommons.v1.PlacePageResponse.LatestPopulationEntry.value:type_name -> datacommons.PointStat
	2,  // 10: datacommons.v1.PlacePageResponse.ValidCategoriesEntry.value:type_name -> datacommons.v1.ObsCategories
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_v1_page_proto_init() }
func file_v1_page_proto_init() {
	if File_v1_page_proto != nil {
		return
	}
	file_stat_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_page_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_page_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Places); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_page_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsCategories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_page_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LandingPageCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_page_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_page_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacePageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_page_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacePageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_page_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_page_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_page_proto_goTypes,
		DependencyIndexes: file_v1_page_proto_depIdxs,
		MessageInfos:      file_v1_page_proto_msgTypes,
	}.Build()
	File_v1_page_proto = out.File
	file_v1_page_proto_rawDesc = nil
	file_v1_page_proto_goTypes = nil
	file_v1_page_proto_depIdxs = nil
}
